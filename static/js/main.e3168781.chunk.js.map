{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["spellSlots","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","App","state","level","dice","casterType","con","damage","healing","tempHealth","healingSurges","spells","handleChange","name","event","target","value","_this","setState","Object","defineProperty","parseInt","lvl","i","push","getSpellSlots","casterLvl","Math","round","slots","forEach","slot","index","toggleSurge","toggleSpellSlot","levelIndex","spellIndex","_this2","this","classes","props","_this$state","react_default","a","createElement","className","container","section","TextField_default","id","label","margin","variant","onChange","Typography_default","map","surge","jsx","chips","Chip_default","key","onClick","slevel","spell","concat","Component","withStyles","display","flexDirection","flexWrap","flex","justifyContent","alignItems","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e3168781.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport './App.css';\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  section: {\n    display: 'flex',\n  },\n  healingSurges: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  chips: {\n    display: 'flex',\n    flex: '1 0 21%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n};\n\nconst spellSlots = {\n  1: [2],\n  2: [3],\n  3: [4, 2],\n  4: [4, 3],\n  5: [4, 3, 2],\n  6: [4, 3, 3],\n  7: [4, 3, 3, 1],\n  8: [4, 3, 3, 2],\n  9: [4, 3, 3, 3, 1],\n  10: [4, 3, 3, 3, 2],\n  11: [4, 3, 3, 3, 2, 1],\n  12: [4, 3, 3, 3, 2, 1],\n  13: [4, 3, 3, 3, 2, 1, 1],\n  14: [4, 3, 3, 3, 2, 1, 1],\n  15: [4, 3, 3, 3, 2, 1, 1, 1],\n  16: [4, 3, 3, 3, 2, 1, 1, 1],\n  17: [4, 3, 3, 3, 2, 1, 1, 1, 1],\n  18: [4, 3, 3, 3, 3, 1, 1, 1, 1],\n  19: [4, 3, 3, 3, 3, 2, 1, 1, 1],\n  20: [4, 3, 3, 3, 3, 2, 2, 1, 1],\n};\n\nclass App extends Component {\n  state = {\n    level: 1,\n    dice: 0,\n    casterType: 1, // 1 fullcaster, 2 halfcaster, 3 thirdcaster\n    con: 0,\n    damage: 0,\n    healing: 0,\n    tempHealth: 0,\n    healingSurges: [0],\n    spells: [],\n  };\n\n  handleChange = name => (event) => {\n    if (event.target.value !== '' || event.target.value === '0') {\n      this.setState({\n        [name]: parseInt(event.target.value, 10),\n      });\n      if (name === 'level') {\n        const healingSurges = [0];\n        const lvl = parseInt(event.target.value, 10) - 1;\n        for (let i = 0; i < lvl; i += 1) {\n          healingSurges.push(0);\n        }\n        const { casterType } = this.state;\n        const spells = this.getSpellSlots(parseInt(event.target.value, 10), casterType);\n        this.setState({ healingSurges, spells });\n      } else if (name === 'casterType') {\n        const { level } = this.state;\n        const spells = this.getSpellSlots(level, parseInt(event.target.value, 10));\n        this.setState({ spells });\n      }\n    } else {\n      this.setState({\n        [name]: 0,\n      });\n    }\n  };\n\n  getSpellSlots = (level, casterType) => {\n    if (casterType > 0) {\n      const casterLvl = Math.round(level / casterType);\n      const slots = spellSlots[casterLvl];\n      const spells = [];\n      slots.forEach((slot, index) => {\n        spells.push([]);\n        for (let i = 0; i < slot; i += 1) {\n          spells[index].push(0);\n        }\n      });\n      return spells;\n    }\n    return [];\n  };\n\n  toggleSurge = (index) => {\n    const { healingSurges } = this.state;\n    healingSurges[index] = healingSurges[index] === 1 ? 0 : 1;\n    this.setState({ healingSurges });\n  };\n\n  toggleSpellSlot = (levelIndex, spellIndex) => {\n    const { spells } = this.state;\n    spells[levelIndex][spellIndex] = spells[levelIndex][spellIndex] === 1 ? 0 : 1;\n    this.setState({ spells });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const {\n      level,\n      dice,\n      con,\n      damage,\n      healing,\n      tempHealth,\n      healingSurges,\n      spells,\n      casterType,\n    } = this.state;\n    return (\n      <div className={classes.container}>\n        <div className={classes.section}>\n          <TextField\n            id=\"level\"\n            label=\"Level\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleChange('level')}\n            value={level}\n          />\n          <TextField\n            id=\"dice\"\n            label=\"HitDice\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleChange('dice')}\n            value={dice}\n          />\n          <TextField\n            id=\"con\"\n            label=\"Constitution\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleChange('con')}\n            value={con}\n          />\n          <TextField\n            id=\"casterType\"\n            label=\"Caster Type\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleChange('casterType')}\n            value={casterType}\n          />\n        </div>\n        <div className={classes.section}>\n          <TextField\n            id=\"damage\"\n            label=\"Damage\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleChange('damage')}\n            value={damage}\n          />\n          <TextField\n            id=\"health\"\n            label=\"Health\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            value={(dice + (level - 1) * (dice / 2 + 1) + con * level) + healing - damage}\n          />\n          <TextField\n            id=\"healing\"\n            label=\"Healing\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleChange('healing')}\n            value={healing}\n          />\n        </div>\n        <TextField\n          id=\"temporal\"\n          label=\"Temp.HP\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          onChange={this.handleChange('tempHealth')}\n          value={tempHealth}\n        />\n        <Typography variant=\"subtitle1\">\n          Healing Surges\n        </Typography>\n        <div className={classes.healingSurges}>\n          {healingSurges.map((surge, index) => {\n            const jsx = [];\n            jsx.push(\n              <div className={classes.chips}>\n                <Chip\n                  key={index}\n                  label={surge}\n                  variant=\"outlined\"\n                  onClick={() => this.toggleSurge(index)}\n                />\n              </div>,\n            );\n            if ((index + 1) % 4 === 0) {\n              jsx.push(<br />);\n            }\n            return jsx;\n          })}\n        </div>\n        <Typography variant=\"subtitle1\">\n          Spell slots\n        </Typography>\n        <div>\n          {spells.map((slevel, levelIndex) => {\n            const jsx = [];\n            jsx.push(\n              <span>\n                {levelIndex + 1}\n                :\n              </span>,\n            );\n            const chips = slevel.map((spell, spellIndex) => (\n              <Chip\n                key={`${levelIndex}-${spellIndex}`}\n                label={spell}\n                variant=\"outlined\"\n                onClick={() => this.toggleSpellSlot(levelIndex, spellIndex)}\n              />\n            ));\n            jsx.push(chips);\n            jsx.push(<br />);\n            return jsx;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.shape(styles).isRequired,\n};\n\nexport default withStyles(styles)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}